<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://free-v2ray.github.io/news/article-20144.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>设计模式学习笔记代理模式以及动态代理的实现</title>
        <meta name="description" content="代理模式（Proxy Design Pattern）是为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象。被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象。 一" />
        <link rel="icon" href="/assets/website/img/free_v2ray/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Free V2ray免费梯子节点分享官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://free-v2ray.github.io/news/article-20144.htm" />
    <meta property="og:site_name" content="Free V2ray免费梯子节点分享官网" />
    <meta property="og:title" content="设计模式学习笔记代理模式以及动态代理的实现" />
    <meta property="og:image" content="https://free-v2ray.github.io/uploads/20240911-1/1ad4d18af3a0a10eb07403871a0957a1.webp" />
        <meta property="og:release_date" content="2024-12-02T07:57:59" />
    <meta property="og:updated_time" content="2024-12-02T07:57:59" />
        <meta property="og:description" content="代理模式（Proxy Design Pattern）是为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象。被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象。 一" />
        
    <!-- google-fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100;300;400;500;700;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/website/css/free_v2ray/style-starter.css">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="设计模式学习笔记代理模式以及动态代理的实现">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-EFW7LQ09JM"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-EFW7LQ09JM');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--header-->
<header id="site-header" class="fixed-top">
    <div class="container">
        <nav class="navbar navbar-expand-lg stroke px-0">
                        <a class="navbar-brand" href="/">
                <span>
                    Free V2ray
                </span>
            </a>
                        <!-- if logo is image enable this
    <a class="navbar-brand" href="#index.html">
        <img src="image-path" alt="Your logo" title="Your logo" style="height:35px;" />
    </a> -->
            <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                <span class="navbar-toggler-icon fa icon-close fa-times"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                <ul class="navbar-nav ml-lg-auto">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="#">关于</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">联系</a>
                    </li>
                </ul>
            </div>
            <!-- toggle switch for light and dark theme -->
            <div class="cont-ser-position mt-lg-2">
                <nav class="navigation">
                    <div class="theme-switch-wrapper">
                        <label class="theme-switch" for="checkbox">
                            <input type="checkbox" id="checkbox">
                            <div class="mode-container">
                                <i class="gg-sun"></i>
                                <i class="gg-moon"></i>
                            </div>
                        </label>
                    </div>
                </nav>
            </div>
            <!-- //toggle switch for light and dark theme -->
        </nav>
    </div>
</header>
<!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <div class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold">设计模式学习笔记代理模式以及动态代理的实现</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><i class="fas fa-angle-right mx-2"></i></li>
                    <li><a href="/news/">新闻资讯</a></li>
                    <li class="active"><i class="fas fa-angle-right mx-2"></i>正文</li>
                </ul>
            </div>
        </div>
    </div>
    <!-- //inner banner -->
    <!-- progress section -->
    <section class="w3l-about-2 py-5">
        <div class="container py-2">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p>代理模式（Proxy Design Pattern）是为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象。被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象。</p> <h2 id="一代理模式介绍">一、代理模式介绍</h2> <p>在结束创建型模式的讲解后，从这一篇开始就进入到了结构型模式，结构型模式主要是总结一些类和或对象组合在一起的结构。代理模式在不改变原始代理类的情况下，通过引入代理类来给原始类附加功能。</p> <p>代理模式的主要结构如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/5069e656d8ee8eadc6a05b2d7221481d.jpg" alt="设计模式学习笔记代理模式以及动态代理的实现"></p> <ol> <li><code>Subject</code>：抽象主题类，通过接口或抽象类声明主题和代理对象实现的业务方法</li> <li><code>RealSubject</code>：真实主题类，实现<code>Subject</code>中的具体业务，是代理对象所代表的真实对象</li> <li><code>Proxy</code>：代理类，其内部含有对真实主题的引用，它可以访问、控制或扩展<code>RealSubject</code>的功能</li> <li><code>Client</code>：客户端，通过使用代理类来访问真实的主题类</li> </ol> <p>按照上面的类图，可以实现如下代码：</p> <pre><code class="language-java">//主题类接口 public interface Subject {     void Request(); }  //真实的主题类 public class RealSubject implements Subject{      @Override     public void Request() {         System.out.println("我是真实的主题类");     } }  //代理类 public class Proxy implements Subject{      private RealSubject realSubject;      @Override     public void Request() {         if (realSubject == null) {             realSubject = new RealSubject();         }         realSubject.Request();     } }  //客户端 public class Client {     public static void main(String[] args) {         Proxy proxy = new Proxy();         proxy.Request();     } }</code></pre> <p>代理模式有比较广泛的使用，比如<code>Spring AOP</code>、<code>RPC</code>、缓存等。在 Java 中，根据代理的创建时期，可以将代理模式分为静态代理和动态代理，下面就来分别阐述。</p> <h2 id="二代理模式实现">二、代理模式实现</h2> <p>动态代理和静态代理的区分就是语言类型是在运行时检查还是在编译期检查。</p> <h3 id="21-静态代理">2.1 静态代理</h3> <p>静态代理是指在编译期，也就是在JVM运行之前就已经获取到了代理类的字节码信息。即Java源码生成<code>.class</code>文件时期：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/68a22591faf8b6f057e74eb3210c67e4.jpg" alt="设计模式学习笔记代理模式以及动态代理的实现"></p> <p>由于在JVM运行前代理类和真实主题类已经是确定的，因此也被称为静态代理。</p> <p>在实际使用中，通常需要定义一个公共接口及其方法，被代理对象（目标对象）与代理对象一起实现相同的接口或继承相同的父类。其实现代码就是第一节中的代码。</p> <h3 id="22-动态代理">2.2 动态代理</h3> <p>动态代理，也就是在JVM运行时期动态构建对象和动态调用代理方法。</p> <p>常用的实现方式是反射。<strong>反射机制</strong>是指程序在运行期间可以访问、检测和修改其本身状态或行为的一种能力，使用反射我们可以调用任意一个类对象，以及其中包含的属性及方法。比如JDK Proxy。</p> <p>此外动态代理也可以通过ASM(Java 字节码操作框架)来实现。比如CGLib。</p> <h4 id="221-jdk-proxy">2.2.1 JDK Proxy</h4> <p>这种方式是JDK自身提供的一种方式，它的实现不需要引用第三方类，只需要实现<code>InvocationHandler</code>接口，重写<code>invoke()</code>方法即可。代码实现如下所示：</p> <pre><code class="language-java">public class ProxyExample {      static interface Car {         void running();     }     static class Bus implements Car {         @Override         public void running() {             System.out.println("bus is running");         }     }     static class Taxi implements Car {         @Override         public void running() {             System.out.println("taxi is runnig");         }     } 	//核心部分 JDK Proxy 代理类     static class JDKProxy implements InvocationHandler {         private Object target;          public Object getInstance(Object target) {             this.target = target;             //获得代理对象             return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);          }          @Override         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {             Object result = method.invoke(target, args);             return result;         }     }      public static void main(String[] args) {         JDKProxy jdkProxy = new JDKProxy();         Car instance = (Car) jdkProxy.getInstance(new Taxi());         instance.running();     } }</code></pre> <p>动态代理的核心是实现<code>Invocation</code>接口，我们再看看<code>Invocation</code>接口的源码：</p> <pre><code class="language-java">public interface InvocationHandler {      public Object invoke(Object proxy, Method method, Object[] args)         throws Throwable; }</code></pre> <p>实际上是通过<code>invoke()</code>方法来触发代理的执行方法。最终使得实现<code>Invocation</code>接口的类具有动态代理的能力。</p> <p>动态代理的好处在于不需要和静态代理一样提前写好公共的代理接口，只需要实现<code>Invocation</code>接口就可拥有动态代理能力。下面我们再来看看 CGLib 是如何实现的</p> <h4 id="222-cglib">2.2.2 CGLib</h4> <p>CGLib 动态代理采取的是创建目标类的子类的方式，通过子类化，我们可以达到近似使用被调用者本身的效果。其实现代码如下所示：</p> <pre><code class="language-java">public class CGLibExample {      static class car {         public void running() {             System.out.println("car is running");         }     }      static class CGLibProxy implements MethodInterceptor {         private Object target;          public Object getInstance(Object target) {             this.target = target;             Enhancer enhancer = new Enhancer();             //设置父类为实例类             enhancer.setSuperclass(this.target.getClass());             //回调方法             enhancer.setCallback(this);             //创建代理对象             return enhancer.create();         }         @Override         public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {             Object result = methodProxy.invokeSuper(o, objects);             return result;         }     }      public static void main(String[] args) {         CGLibProxy cgLibProxy = new CGLibProxy();         car instance = (car) cgLibProxy.getInstance(new car());         instance.running();     } }</code></pre> <p>从代码可以看出CGLib 也是通过实现代理器的接口，然后再调用某个方法完成动态代理，不同的是CGLib在初始化被代理类时，是通过<code>Enhancer</code>对象把代理对象设置为被代理类的子类来实现动态代理：</p> <pre><code class="language-java">Enhancer enhancer = new Enhancer(); //设置父类为实例类 enhancer.setSuperclass(this.target.getClass()); //回调方法 enhancer.setCallback(this); //创建代理对象 return enhancer.create();</code></pre> <h4 id="223-jdk-proxy-和-cglib-的区别">2.2.3 JDK Proxy 和 CGLib 的区别</h4> <ol> <li>来源：JDK Proxy 是JDK 自带的功能，CGLib 是第三方提供的工具</li> <li>实现：JDK Proxy 通过拦截器加反射的方式实现；CGLib 基于ASM实现，性能比较高</li> <li>接口：JDK Proxy 只能代理继承接口的类，CGLib 不需要通过接口来实现，它是通过实现子类的方式来完成调用</li> </ol> <h2 id="三代理模式的应用场景">三、代理模式的应用场景</h2> <h3 id="31-mapperproxyfactory">3.1 MapperProxyFactory</h3> <p>在MyBatis 中，也存在着代理模式的使用，比如<code>MapperProxyFactory</code>。其中的<code>newInstance()</code>方法就是生成一个具体的代理来实现功能，代码如下：</p> <pre><code class="language-java">public class MapperProxyFactory&lt;T&gt; {   private final Class&lt;T&gt; mapperInterface;        private final Map&lt;Method, MapperMethodInvoker&gt; methodCache = new ConcurrentHashMap&lt;&gt;();        public MapperProxyFactory(Class&lt;T&gt; mapperInterface) {     this.mapperInterface = mapperInterface;   }    public Class&lt;T&gt; getMapperInterface() {     return mapperInterface;   }    public Map&lt;Method, MapperMethodInvoker&gt; getMethodCache() {     return methodCache;   }    // 创建代理类   @SuppressWarnings("unchecked")   protected T newInstance(MapperProxy&lt;T&gt; mapperProxy) {     return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[] { mapperInterface }, mapperProxy);   }    public T newInstance(SqlSession sqlSession) {     final MapperProxy&lt;T&gt; mapperProxy = new MapperProxy&lt;&gt;(sqlSession, mapperInterface, methodCache);     return newInstance(mapperProxy);   } }</code></pre> <h3 id="32-spring-aop">3.2 Spring AOP</h3> <p>代理模式最常使用的一个应用场景就是在业务系统中开发一些非功能性需求，比如监控、统计、鉴权、限流、事务、日志等。将这些附加功能与业务功能解耦，放在代理类中统一处理，让程序员只需要关注业务方面的开发。而Spring AOP 的切面实现原理就是基于动态代理</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/32e055a24fcf4ce02bde01419ed36176.jpg" alt="设计模式学习笔记代理模式以及动态代理的实现"></p> <p>Spring AOP 的底层通过上面提到的 JDK Proxy 和 CGLib动态代理机制，为目标对象执行横向织入。当Bean实现了接口时， Spring就会使用JDK Proxy，在没有实现接口时就会使用 CGLib。也可以在配置中强制使用 CGLib：</p> <p><code>&lt;aop:aspectj-autoproxy proxy-target-class="true"/&gt;</code></p> <h3 id="33-rpc-框架的封装">3.3 RPC 框架的封装</h3> <p>RPC 框架的实现可以看作成是一种代理模式，通过远程代理、将网络同步、数据编解码等细节隐藏起来，让客户端在使用 RPC 服务时，不必考虑这些细节。</p> <h2 id="参考资料">参考资料</h2> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://c.biancheng.net/view/1359.html"  target="_blank" rel="nofollow">http://c.biancheng.net/view/1359.html</a></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://kaiwu.lagou.com/course/courseInfo.htm?courseId=59#/detail/pc?id=1768"  target="_blank" rel="nofollow">https://kaiwu.lagou.com/course/courseInfo.htm?courseId=59#/detail/pc?id=1768</a></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://time.geekbang.org/column/article/7489"  target="_blank" rel="nofollow">https://time.geekbang.org/column/article/7489</a></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://time.geekbang.org/column/article/201823"  target="_blank" rel="nofollow">https://time.geekbang.org/column/article/201823</a></p> <p>《Java 重学设计模式》</p> <p>《大话设计模式》</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-19689.htm">属马养猫好吗（属马人养猫的大忌）</a></p>
                                        <p>下一个：<a href="/news/article-20145.htm">宠物狗疫苗能自己打吗多少钱（狗狗疫苗自己打可以办狗证吗）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-1-9-free-v2ray.htm" title="1月9日→18.5M/S|2025年最新免费节点Free V2ray订阅链接地址分享">1月9日→18.5M/S|2025年最新免费节点Free V2ray订阅链接地址分享</a></li>
                        <li class="py-2"><a href="/news/article-21062.htm" title="济南宠物领养中心有哪些公司 济南宠物领养中心有哪些公司招聘">济南宠物领养中心有哪些公司 济南宠物领养中心有哪些公司招聘</a></li>
                        <li class="py-2"><a href="/news/article-45939.htm" title="我到今天才知道SQL92和SQL99">我到今天才知道SQL92和SQL99</a></li>
                        <li class="py-2"><a href="/news/article-25208.htm" title="动物疫苗公司 上海 动物疫苗公司 上海有几家">动物疫苗公司 上海 动物疫苗公司 上海有几家</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-30-clash-v2ray-ss-ssr.htm" title="12月30日→21.8M/S|2024年最新免费节点Free V2ray订阅链接地址分享">12月30日→21.8M/S|2024年最新免费节点Free V2ray订阅链接地址分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-7-free-subscribe-node.htm" title="1月7日→22.3M/S|2025年最新免费节点Free V2ray订阅链接地址分享">1月7日→22.3M/S|2025年最新免费节点Free V2ray订阅链接地址分享</a></li>
                        <li class="py-2"><a href="/news/article-40485.htm" title="宠物领养协议书怎么写的（宠物领养协议书范本）">宠物领养协议书怎么写的（宠物领养协议书范本）</a></li>
                        <li class="py-2"><a href="/news/article-47410.htm" title="vue3使用ref获取元素">vue3使用ref获取元素</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-22-clash-v2ray-ss-ssr.htm" title="12月22日→21.5M/S|2024年最新免费节点Free V2ray订阅链接地址分享">12月22日→21.5M/S|2024年最新免费节点Free V2ray订阅链接地址分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-29-free-high-speed-nodes.htm" title="12月29日→19.3M/S|2024年最新免费节点Free V2ray订阅链接地址分享">12月29日→19.3M/S|2024年最新免费节点Free V2ray订阅链接地址分享</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- //progress section -->
    <!--//testimonials-->
        <!-- footer -->
    <footer class="w3l-footer-16 py-5">
        <div class="container">
            <div class="below-section text-center">
                <p class="copy-text">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <a href="/">Free V2ray免费梯子节点分享官网</a> 版权所有 Powered by WordPress
                </p>
            </div>
        </div>
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fas fa-level-up-alt" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/website/js/frontend/free_v2ray/jquery-3.5.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- counter for stats -->
    <script src="/assets/website/js/frontend/free_v2ray/counter.js"></script>
    <!-- //counter for stats -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/free_v2ray/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the
        // class of outer div
        // The second paramter is the speed between each letter is typed.
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/website/js/frontend/free_v2ray/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
    <!-- //Js scripts -->
</body>

</html>