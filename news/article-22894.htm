<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://free-v2ray.github.io/news/article-22894.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Spring Security实现基于RBAC的权限表达式动态访问控制</title>
        <meta name="description" content="昨天有个粉丝加了我，问我如何实现类似shiro的资源权限表达式的访问控制。我以前有一个小框架用的就是shiro，权限控制就用了资源权限表达式，所以这个东西对我不陌生，但是在Spring Securit" />
        <link rel="icon" href="/assets/website/img/free_v2ray/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Free V2ray免费梯子节点分享官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://free-v2ray.github.io/news/article-22894.htm" />
    <meta property="og:site_name" content="Free V2ray免费梯子节点分享官网" />
    <meta property="og:title" content="Spring Security实现基于RBAC的权限表达式动态访问控制" />
    <meta property="og:image" content="https://free-v2ray.github.io/uploads/20240911-1/ca739634c266bae41556d27eeb274c60.webp" />
        <meta property="og:release_date" content="2024-12-08T07:14:45" />
    <meta property="og:updated_time" content="2024-12-08T07:14:45" />
        <meta property="og:description" content="昨天有个粉丝加了我，问我如何实现类似shiro的资源权限表达式的访问控制。我以前有一个小框架用的就是shiro，权限控制就用了资源权限表达式，所以这个东西对我不陌生，但是在Spring Securit" />
        
    <!-- google-fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100;300;400;500;700;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/website/css/free_v2ray/style-starter.css">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Spring Security实现基于RBAC的权限表达式动态访问控制">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-EFW7LQ09JM"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-EFW7LQ09JM');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--header-->
<header id="site-header" class="fixed-top">
    <div class="container">
        <nav class="navbar navbar-expand-lg stroke px-0">
                        <a class="navbar-brand" href="/">
                <span>
                    Free V2ray
                </span>
            </a>
                        <!-- if logo is image enable this
    <a class="navbar-brand" href="#index.html">
        <img src="image-path" alt="Your logo" title="Your logo" style="height:35px;" />
    </a> -->
            <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                <span class="navbar-toggler-icon fa icon-close fa-times"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                <ul class="navbar-nav ml-lg-auto">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="#">关于</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">联系</a>
                    </li>
                </ul>
            </div>
            <!-- toggle switch for light and dark theme -->
            <div class="cont-ser-position mt-lg-2">
                <nav class="navigation">
                    <div class="theme-switch-wrapper">
                        <label class="theme-switch" for="checkbox">
                            <input type="checkbox" id="checkbox">
                            <div class="mode-container">
                                <i class="gg-sun"></i>
                                <i class="gg-moon"></i>
                            </div>
                        </label>
                    </div>
                </nav>
            </div>
            <!-- //toggle switch for light and dark theme -->
        </nav>
    </div>
</header>
<!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <div class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold">Spring Security实现基于RBAC的权限表达式动态访问控制</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><i class="fas fa-angle-right mx-2"></i></li>
                    <li><a href="/news/">新闻资讯</a></li>
                    <li class="active"><i class="fas fa-angle-right mx-2"></i>正文</li>
                </ul>
            </div>
        </div>
    </div>
    <!-- //inner banner -->
    <!-- progress section -->
    <section class="w3l-about-2 py-5">
        <div class="container py-2">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p>昨天有个粉丝加了我，问我如何实现类似shiro的资源权限表达式的访问控制。我以前有一个小框架用的就是shiro，权限控制就用了资源权限表达式，所以这个东西对我不陌生，但是在Spring Security中我并没有使用过它，不过我认为Spring Security可以实现这一点。是的，我找到了实现它的方法。</p> <h3 id="资源权限表达式">资源权限表达式</h3> <p>说了这么多，我觉得应该解释一下什么叫资源权限表达式。权限控制的核心就是清晰地表达出特定资源的某种操作，一个格式良好好的权限声明可以清晰表达出用户对该资源拥有的操作权限。</p> <p>通常一个资源在系统中的标识是唯一的，比如<strong>User</strong>用来标识用户，<strong>ORDER</strong>标识订单。不管什么资源大都可以归纳出以下这几种操作</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/1cc8c293aa89190e1ee0e7cc62d550d2.jpg" alt="Spring Security实现基于RBAC的权限表达式动态访问控制"></p> <p>在 shiro权限声明通常对上面的这种资源操作关系用冒号分隔的方式进行表示。例如读取用户信息的操作表示为<code>USER:READ</code>，甚至还可以更加细一些，用<code>USER:READ:123</code>表示读取<strong>ID</strong>为<code>123</code>的用户权限。</p> <p>资源操作定义好了，再把它和角色关联起来不就是基于RBAC的权限资源控制了吗？就像下面这样：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/2af86d5f5db3c9aa8722995ad3afd257.jpg" alt="Spring Security实现基于RBAC的权限表达式动态访问控制"></p> <p>这样资源和角色的关系可以进行CRUD操作进行动态绑定。</p> <h3 id="spring-security中的实现">Spring Security中的实现</h3> <p>资源权限表达式动态权限控制在Spring Security也是可以实现的。首先开启方法级别的注解安全控制。</p> <pre><code class="language-java">/**  * 开启方法安全注解  *  * @author felord.cn  */ @EnableGlobalMethodSecurity(prePostEnabled = true,         securedEnabled = true,         jsr250Enabled = true) public class MethodSecurityConfig {      }</code></pre> <h4 id="methodsecurityexpressionhandler">MethodSecurityExpressionHandler</h4> <p><code>MethodSecurityExpressionHandler</code> 提供了一个对方法进行安全访问的门面扩展。它的实现类<code>DefaultMethodSecurityExpressionHandler</code>更是提供了针对方法的一系列扩展接口，这里我总结了一下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/69fd01e989f655213d98dc3a54c4a116.jpg" alt="Spring Security实现基于RBAC的权限表达式动态访问控制"></p> <p>这里的<code>PermissionEvaluator</code>正好可以满足需要。</p> <h5 id="permissionevaluator">PermissionEvaluator</h5> <p><code>PermissionEvaluator</code> 接口抽象了对一个用户是否有权限访问一个特定的领域对象的评估过程。</p> <pre><code class="language-java">public interface PermissionEvaluator extends AopInfrastructureBean {    	boolean hasPermission(Authentication authentication,                            Object targetDomainObject, Object permission);    	boolean hasPermission(Authentication authentication,                            Serializable targetId, String targetType, Object permission);  }</code></pre> <p>这两个方法仅仅参数列表不同，这些参数的含义为：</p> <ul> <li><code>authentication</code> 当前用户的认证信息，持有当前用户的角色权限。</li> <li><code>targetDomainObject</code> 用户想要访问的目标领域对象，例如上面的<code>USER</code>。</li> <li><code>permission</code> 这个当前方法设定的目标领域对象的权限，例如上面的<code>READ</code>。</li> <li><code>targetId</code> 这种是对上面<code>targetDomainObject</code> 的具体化，比如ID为<code>123</code>的<code>USER</code>，我觉得还可以搞成租户什么的。</li> <li><code>targetType</code> 是为了配合<code>targetId</code> 。</li> </ul> <blockquote> <p>第一个方法是用来实现<code>USER:READ</code>的；第二个方法是用来实现<code>USER:READ:123</code>的。</p> </blockquote> <h4 id="思路以及实现">思路以及实现</h4> <p><code>targetDomainObject:permission</code>不就是<code>USER:READ</code>的抽象吗？只要找出<code>USER:READ</code>对应的角色集合，和当前用户持有的角色进行比对，它们存在交集就证明用户有权限访问。借着这个思路胖哥实现了一个<code>PermissionEvaluator</code>:</p> <pre><code class="language-java">/**  * 资源权限评估  *   * @author felord.cn  */ public class ResourcePermissionEvaluator implements PermissionEvaluator {     private final BiFunction&lt;String, String, Collection&lt;? extends GrantedAuthority&gt;&gt; permissionFunction;      public ResourcePermissionEvaluator(BiFunction&lt;String, String, Collection&lt;? extends GrantedAuthority&gt;&gt; permissionFunction) {         this.permissionFunction = permissionFunction;     }      @Override     public boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permission) {         //查询方法标注对应的角色         Collection&lt;? extends GrantedAuthority&gt; resourceAuthorities = permissionFunction.apply((String) targetDomainObject, (String) permission);         // 用户对应的角色         Collection&lt;? extends GrantedAuthority&gt; userAuthorities = authentication.getAuthorities();          // 对比 true 就能访问  false 就不能访问         return userAuthorities.stream().anyMatch(resourceAuthorities::contains);     }      @Override     public boolean hasPermission(Authentication authentication, Serializable targetId, String targetType, Object permission) {         //todo         System.out.println("targetId = " + targetId);         return true;     } }</code></pre> <blockquote> <p>第二个方法没有实现，因为两个差不多，第二个你可以想想具体的使用场景。</p> </blockquote> <h4 id="配置和使用">配置和使用</h4> <p><code>PermissionEvaluator</code> 需要注入到<strong>Spring IoC</strong>，并且<strong>Spring IoC</strong>只能有一个该类型的<strong>Bean</strong>：</p> <pre><code class="language-java">    @Bean     PermissionEvaluator resourcePermissionEvaluator() {         return new ResourcePermissionEvaluator((targetDomainObject, permission) -&gt; {             //TODO 这里形式其实可以不固定             String key = targetDomainObject + ":" + permission;             //TODO  查询 key 和  authority 的关联关系             //  模拟 permission 关联角色   根据key 去查 grantedAuthorities             Set&lt;SimpleGrantedAuthority&gt; grantedAuthorities = new HashSet&lt;&gt;();             grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_ADMIN"));             return "USER:READ".equals(key) ? grantedAuthorities : new HashSet&lt;&gt;();         });     }</code></pre> <p>接下来写个接口，用<code>@PreAuthorize</code>注解标记，然后直接用<code>hasPermission('USER','READ')</code>来静态绑定该接口的访问权限表达式：</p> <pre><code class="language-java">    @GetMapping("/postfilter")     @PreAuthorize("hasPermission('USER','READ')")     public Collection&lt;String&gt; postfilter(){         List&lt;String&gt; list = new ArrayList&lt;&gt;();         list.add("felord.cn");         list.add("码农小胖哥");         list.add("请关注一下");         return list;     }</code></pre> <p>然后定义一个用户：</p> <pre><code class="language-java">    @Bean     UserDetailsService users() {         UserDetails user = User.builder()                 .username("felord")                 .password("123456")       .passwordEncoder(PasswordEncoderFactories.createDelegatingPasswordEncoder()::encode)                 .roles("USER")                 .authorities("ROLE_ADMIN","ROLE_USER")                 .build();         return new InMemoryUserDetailsManager(user);     }</code></pre> <p>接下来肯定是正常能够访问接口的。当你改变了<code>@PreAuthorize</code>中表达式的值或者移除了用户的<code>ROLE_ADMIN</code>权限，再或者<code>USER:READ</code>关联到了其它角色等等，都会返回<code>403</code>。</p> <h5 id="留给你去测试的">留给你去测试的</h5> <p>你可以看看注解改成这样会是什么效果：</p> <pre><code>  @PreAuthorize("hasPermission('1234','USER','READ')")</code></pre> <p>还有这个：</p> <pre><code class="language-java">  @PreAuthorize("hasPermission('USER','READ') or hasRole('ADMIN')")</code></pre> <p>或者让<code>targetId</code>动态化：</p> <pre><code class="language-java">    @PreAuthorize("hasPermission(#id,'USER','READ')")     public Collection&lt;String&gt; postfilter(String id){              }</code></pre> <p></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-22438.htm">动物医院好评语100字通用（动物医院好评语100字通用版）</a></p>
                                        <p>下一个：<a href="/news/article-22897.htm">从源码角度分析创建线程池究竟有哪些方式</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-1-5-free-node-subscribe-links.htm" title="1月5日→20.5M/S|2025年最新免费节点Free V2ray订阅链接地址分享">1月5日→20.5M/S|2025年最新免费节点Free V2ray订阅链接地址分享</a></li>
                        <li class="py-2"><a href="/news/article-46915.htm" title="pip 和 Conda 镜像站配置">pip 和 Conda 镜像站配置</a></li>
                        <li class="py-2"><a href="/news/article-46443.htm" title="青浦区二中最低分数线是多少2023（青浦二中高考录取率大概多少）">青浦区二中最低分数线是多少2023（青浦二中高考录取率大概多少）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-10-free-node-subscribe.htm" title="11月10日→19.1M/S|2024年最新免费节点Free V2ray订阅链接地址">11月10日→19.1M/S|2024年最新免费节点Free V2ray订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-20144.htm" title="设计模式学习笔记代理模式以及动态代理的实现">设计模式学习笔记代理模式以及动态代理的实现</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-23-node-share-links.htm" title="11月23日→18.7M/S|2024年最新免费节点Free V2ray订阅链接地址">11月23日→18.7M/S|2024年最新免费节点Free V2ray订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-43967.htm" title="k8s入门之PV和PVC">k8s入门之PV和PVC</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-18-node-share-links.htm" title="12月18日→19.2M/S|2024年最新免费节点Free V2ray订阅链接地址">12月18日→19.2M/S|2024年最新免费节点Free V2ray订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-18-free-v2ray.htm" title="1月18日→19.1M/S|2025年最新免费节点Free V2ray订阅链接地址分享">1月18日→19.1M/S|2025年最新免费节点Free V2ray订阅链接地址分享</a></li>
                        <li class="py-2"><a href="/news/article-24277.htm" title="宠物食品一手货源（宠物用品一手货源）">宠物食品一手货源（宠物用品一手货源）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- //progress section -->
    <!--//testimonials-->
        <!-- footer -->
    <footer class="w3l-footer-16 py-5">
        <div class="container">
            <div class="below-section text-center">
                <p class="copy-text">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <a href="/">Free V2ray免费梯子节点分享官网</a> 版权所有 Powered by WordPress
                </p>
            </div>
        </div>
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fas fa-level-up-alt" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/website/js/frontend/free_v2ray/jquery-3.5.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- counter for stats -->
    <script src="/assets/website/js/frontend/free_v2ray/counter.js"></script>
    <!-- //counter for stats -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/free_v2ray/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the
        // class of outer div
        // The second paramter is the speed between each letter is typed.
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/website/js/frontend/free_v2ray/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
    <!-- //Js scripts -->
</body>

</html>