<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://free-v2ray.github.io/news/article-22897.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>从源码角度分析创建线程池究竟有哪些方式</title>
        <meta name="description" content="大家好，我是冰河~~ 在Java的高并发领域，线程池一直是一个绕不开的话题。有些童鞋一直在使用线程池，但是，对于如何创建线程池仅仅停留在使用Executors工具类的方式，那么，创建线程池究竟存在哪几" />
        <link rel="icon" href="/assets/website/img/free_v2ray/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Free V2ray免费梯子节点分享官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://free-v2ray.github.io/news/article-22897.htm" />
    <meta property="og:site_name" content="Free V2ray免费梯子节点分享官网" />
    <meta property="og:title" content="从源码角度分析创建线程池究竟有哪些方式" />
    <meta property="og:image" content="https://free-v2ray.github.io/uploads/20240911-1/279bd4c646cc021cc353c76a9c70c3a6.webp" />
        <meta property="og:release_date" content="2024-12-08T07:14:45" />
    <meta property="og:updated_time" content="2024-12-08T07:14:45" />
        <meta property="og:description" content="大家好，我是冰河~~ 在Java的高并发领域，线程池一直是一个绕不开的话题。有些童鞋一直在使用线程池，但是，对于如何创建线程池仅仅停留在使用Executors工具类的方式，那么，创建线程池究竟存在哪几" />
        
    <!-- google-fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100;300;400;500;700;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/website/css/free_v2ray/style-starter.css">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="从源码角度分析创建线程池究竟有哪些方式">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-EFW7LQ09JM"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-EFW7LQ09JM');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--header-->
<header id="site-header" class="fixed-top">
    <div class="container">
        <nav class="navbar navbar-expand-lg stroke px-0">
                        <a class="navbar-brand" href="/">
                <span>
                    Free V2ray
                </span>
            </a>
                        <!-- if logo is image enable this
    <a class="navbar-brand" href="#index.html">
        <img src="image-path" alt="Your logo" title="Your logo" style="height:35px;" />
    </a> -->
            <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                <span class="navbar-toggler-icon fa icon-close fa-times"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                <ul class="navbar-nav ml-lg-auto">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="#">关于</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">联系</a>
                    </li>
                </ul>
            </div>
            <!-- toggle switch for light and dark theme -->
            <div class="cont-ser-position mt-lg-2">
                <nav class="navigation">
                    <div class="theme-switch-wrapper">
                        <label class="theme-switch" for="checkbox">
                            <input type="checkbox" id="checkbox">
                            <div class="mode-container">
                                <i class="gg-sun"></i>
                                <i class="gg-moon"></i>
                            </div>
                        </label>
                    </div>
                </nav>
            </div>
            <!-- //toggle switch for light and dark theme -->
        </nav>
    </div>
</header>
<!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <div class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold">从源码角度分析创建线程池究竟有哪些方式</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><i class="fas fa-angle-right mx-2"></i></li>
                    <li><a href="/news/">新闻资讯</a></li>
                    <li class="active"><i class="fas fa-angle-right mx-2"></i>正文</li>
                </ul>
            </div>
        </div>
    </div>
    <!-- //inner banner -->
    <!-- progress section -->
    <section class="w3l-about-2 py-5">
        <div class="container py-2">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p><strong>大家好，我是冰河~~</strong></p> <p>在Java的高并发领域，线程池一直是一个绕不开的话题。有些童鞋一直在使用线程池，但是，对于如何创建线程池仅仅停留在使用Executors工具类的方式，那么，创建线程池究竟存在哪几种方式呢？就让我们一起从创建线程池的源码来深入分析究竟有哪些方式可以创建线程池。</p> <h3 id="使用executors工具类创建线程池">使用Executors工具类创建线程池</h3> <p>在创建线程池时，初学者用的最多的就是Executors 这个工具类，而使用这个工具类创建线程池时非常简单的，不需要关注太多的线程池细节，只需要传入必要的参数即可。Executors 工具类提供了几种创建线程池的方法，如下所示。</p> <ul> <li>Executors.newCachedThreadPool：创建一个可缓存的线程池，如果线程池的大小超过了需要，可以灵活回收空闲线程，如果没有可回收线程，则新建线程</li> <li>Executors.newFixedThreadPool：创建一个定长的线程池，可以控制线程的最大并发数，超出的线程会在队列中等待</li> <li>Executors.newScheduledThreadPool：创建一个定长的线程池，支持定时、周期性的任务执行</li> <li>Executors.newSingleThreadExecutor: 创建一个单线程化的线程池，使用一个唯一的工作线程执行任务，保证所有任务按照指定顺序（先入先出或者优先级）执行</li> <li>Executors.newSingleThreadScheduledExecutor:创建一个单线程化的线程池，支持定时、周期性的任务执行</li> <li>Executors.newWorkStealingPool：创建一个具有并行级别的work-stealing线程池</li> </ul> <p>其中，Executors.newWorkStealingPool方法是Java 8中新增的创建线程池的方法，它能够为线程池设置并行级别，具有更高的并发度和性能。除了此方法外，其他创建线程池的方法本质上调用的是ThreadPoolExecutor类的构造方法。</p> <p>例如，我们可以使用如下代码创建线程池。</p> <pre><code class="language-java">Executors.newWorkStealingPool(); Executors.newCachedThreadPool(); Executors.newScheduledThreadPool(3);</code></pre> <h3 id="使用threadpoolexecutor类创建线程池">使用ThreadPoolExecutor类创建线程池</h3> <p>从代码结构上看ThreadPoolExecutor类继承自AbstractExecutorService，也就是说，ThreadPoolExecutor类具有AbstractExecutorService类的全部功能。</p> <p>既然Executors工具类中创建线程池大部分调用的都是ThreadPoolExecutor类的构造方法，所以，我们也可以直接调用ThreadPoolExecutor类的构造方法来创建线程池，而不再使用Executors工具类。接下来，我们一起看下ThreadPoolExecutor类的构造方法。</p> <p>ThreadPoolExecutor类中的所有构造方法如下所示。</p> <pre><code class="language-java">public ThreadPoolExecutor(int corePoolSize, 			      int maximumPoolSize, 			      long keepAliveTime, 			      TimeUnit unit, 			     BlockingQueue&lt;Runnable&gt; workQueue) { 	this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, 		 Executors.defaultThreadFactory(), defaultHandler); }  public ThreadPoolExecutor(int corePoolSize, 				int maximumPoolSize, 				long keepAliveTime, 				TimeUnit unit, 				BlockingQueue&lt;Runnable&gt; workQueue, 			        ThreadFactory threadFactory) { this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, 	 threadFactory, defaultHandler); }  public ThreadPoolExecutor(int corePoolSize, 				int maximumPoolSize, 				long keepAliveTime, 			        TimeUnit unit, 				BlockingQueue&lt;Runnable&gt; workQueue, 				RejectedExecutionHandler handler) { this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, 	 Executors.defaultThreadFactory(), handler); }  public ThreadPoolExecutor(int corePoolSize, 				int maximumPoolSize, 				long keepAliveTime, 				TimeUnit unit, 			        BlockingQueue&lt;Runnable&gt; workQueue, 				ThreadFactory threadFactory, 				RejectedExecutionHandler handler) { 	if (corePoolSize &lt; 0 || 		maximumPoolSize &lt;= 0 || 		maximumPoolSize &lt; corePoolSize || 		keepAliveTime &lt; 0) 		throw new IllegalArgumentException(); 	if (workQueue == null || threadFactory == null || handler == null) 		throw new NullPointerException(); 	this.acc = System.getSecurityManager() == null ? 			null : 			AccessController.getContext(); 	this.corePoolSize = corePoolSize; 	this.maximumPoolSize = maximumPoolSize; 	this.workQueue = workQueue; 	this.keepAliveTime = unit.toNanos(keepAliveTime); 	this.threadFactory = threadFactory; 	this.handler = handler; }</code></pre> <p>由ThreadPoolExecutor类的构造方法的源代码可知，创建线程池最终调用的构造方法如下。</p> <pre><code class="language-java">public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, 			  long keepAliveTime, TimeUnit unit, 			  BlockingQueue&lt;Runnable&gt; workQueue, 			  ThreadFactory threadFactory, 		          RejectedExecutionHandler handler) { 	if (corePoolSize &lt; 0 || 		maximumPoolSize &lt;= 0 || 		maximumPoolSize &lt; corePoolSize || 		keepAliveTime &lt; 0) 		throw new IllegalArgumentException(); 	if (workQueue == null || threadFactory == null || handler == null) 		throw new NullPointerException(); 	this.acc = System.getSecurityManager() == null ? 			null : 			AccessController.getContext(); 	this.corePoolSize = corePoolSize; 	this.maximumPoolSize = maximumPoolSize; 	this.workQueue = workQueue; 	this.keepAliveTime = unit.toNanos(keepAliveTime); 	this.threadFactory = threadFactory; 	this.handler = handler; }</code></pre> <p>关于此构造方法中各参数的含义和作用，各位可以移步《<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/l1028386804/article/details/104409796"  target="_blank" rel="nofollow">高并发之——不得不说的线程池与ThreadPoolExecutor类浅析</a>》进行查阅。</p> <p>大家可以自行调用ThreadPoolExecutor类的构造方法来创建线程池。例如，我们可以使用如下形式创建线程池。</p> <pre><code class="language-java">new ThreadPoolExecutor(0, Integer.MAX_VALUE,                        60L, TimeUnit.SECONDS,                        new SynchronousQueue&lt;Runnable&gt;());</code></pre> <h3 id="使用forkjoinpool类创建线程池">使用ForkJoinPool类创建线程池</h3> <p>在Java8的Executors工具类中，新增了如下创建线程池的方式。</p> <pre><code class="language-java">public static ExecutorService newWorkStealingPool(int parallelism) { 	return new ForkJoinPool 		(parallelism, 		 ForkJoinPool.defaultForkJoinWorkerThreadFactory, 		 null, true); }  public static ExecutorService newWorkStealingPool() { 	return new ForkJoinPool 		(Runtime.getRuntime().availableProcessors(), 		 ForkJoinPool.defaultForkJoinWorkerThreadFactory, 		 null, true); }</code></pre> <p>从源代码可以可以，本质上调用的是ForkJoinPool类的构造方法类创建线程池，而从代码结构上来看ForkJoinPool类继承自AbstractExecutorService抽象类。接下来，我们看下ForkJoinPool类的构造方法。</p> <pre><code class="language-java">public ForkJoinPool() { 	this(Math.min(MAX_CAP, Runtime.getRuntime().availableProcessors()), 		 defaultForkJoinWorkerThreadFactory, null, false); }  public ForkJoinPool(int parallelism) { 	this(parallelism, defaultForkJoinWorkerThreadFactory, null, false); }  public ForkJoinPool(int parallelism, 				ForkJoinWorkerThreadFactory factory, 				UncaughtExceptionHandler handler, 				boolean asyncMode) { 	this(checkParallelism(parallelism), 		 checkFactory(factory), 		 handler, 		 asyncMode ? FIFO_QUEUE : LIFO_QUEUE, 		 "ForkJoinPool-" + nextPoolId() + "-worker-"); 	checkPermission(); }  private ForkJoinPool(int parallelism, 				 ForkJoinWorkerThreadFactory factory, 				 UncaughtExceptionHandler handler, 				 int mode, 				 String workerNamePrefix) { 	this.workerNamePrefix = workerNamePrefix; 	this.factory = factory; 	this.ueh = handler; 	this.config = (parallelism &amp; SMASK) | mode; 	long np = (long)(-parallelism); // offset ctl counts 	this.ctl = ((np &lt;&lt; AC_SHIFT) &amp; AC_MASK) | ((np &lt;&lt; TC_SHIFT) &amp; TC_MASK); }</code></pre> <p>通过查看源代码得知，ForkJoinPool的构造方法，最终调用的是如下私有构造方法。</p> <pre><code class="language-java">private ForkJoinPool(int parallelism, 				 ForkJoinWorkerThreadFactory factory, 				 UncaughtExceptionHandler handler, 				 int mode, 				 String workerNamePrefix) { 	this.workerNamePrefix = workerNamePrefix; 	this.factory = factory; 	this.ueh = handler; 	this.config = (parallelism &amp; SMASK) | mode; 	long np = (long)(-parallelism); // offset ctl counts 	this.ctl = ((np &lt;&lt; AC_SHIFT) &amp; AC_MASK) | ((np &lt;&lt; TC_SHIFT) &amp; TC_MASK); }</code></pre> <p>其中，各参数的含义如下所示。</p> <ul> <li>parallelism：并发级别。</li> <li>factory：创建线程的工厂类对象。</li> <li>handler：当线程池中的线程抛出未捕获的异常时，统一使用UncaughtExceptionHandler对象处理。</li> <li>mode：取值为FIFO_QUEUE或者LIFO_QUEUE。</li> <li>workerNamePrefix：执行任务的线程名称的前缀。</li> </ul> <p>当然，私有构造方法虽然是参数最多的一个方法，但是其不会直接对外方法，我们可以使用如下方式创建线程池。</p> <pre><code class="language-java">new ForkJoinPool(); new ForkJoinPool(Runtime.getRuntime().availableProcessors()); new ForkJoinPool(Runtime.getRuntime().availableProcessors(),              ForkJoinPool.defaultForkJoinWorkerThreadFactory,              null, true);</code></pre> <h3 id="使用scheduledthreadpoolexecutor类创建线程池">使用ScheduledThreadPoolExecutor类创建线程池</h3> <p>在Executors工具类中存在如下方法类创建线程池。</p> <pre><code class="language-java">public static ScheduledExecutorService newSingleThreadScheduledExecutor() { 	return new DelegatedScheduledExecutorService 		(new ScheduledThreadPoolExecutor(1)); }  public static ScheduledExecutorService newSingleThreadScheduledExecutor(ThreadFactory threadFactory) { 	return new DelegatedScheduledExecutorService 		(new ScheduledThreadPoolExecutor(1, threadFactory)); }  public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) { 	return new ScheduledThreadPoolExecutor(corePoolSize); }  public static ScheduledExecutorService newScheduledThreadPool( 		int corePoolSize, ThreadFactory threadFactory) { 	return new ScheduledThreadPoolExecutor(corePoolSize, threadFactory); }</code></pre> <p>从源码来看，这几个方法本质上调用的都是ScheduledThreadPoolExecutor类的构造方法，ScheduledThreadPoolExecutor中存在的构造方法如下所示。</p> <pre><code class="language-java">public ScheduledThreadPoolExecutor(int corePoolSize) { 	super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS, 		  new DelayedWorkQueue()); }  public ScheduledThreadPoolExecutor(int corePoolSize, ThreadFactory threadFactory) { 	super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS, 		  new DelayedWorkQueue(), threadFactory); }  public ScheduledThreadPoolExecutor(int corePoolSize, RejectedExecutionHandler handler) { 	super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS, 		  new DelayedWorkQueue(), handler); }  public ScheduledThreadPoolExecutor(int corePoolSize,ThreadFactory threadFactory, RejectedExecutionHandler handler) { 	super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS, 		  new DelayedWorkQueue(), threadFactory, handler); }</code></pre> <p>而从代码结构上看，ScheduledThreadPoolExecutor类继承自ThreadPoolExecutor类，本质上还是调用ThreadPoolExecutor类的构造方法，只不过此时传递的队列为DelayedWorkQueue。我们可以直接调用ScheduledThreadPoolExecutor类的构造方法来创建线程池，例如以如下形式创建线程池。</p> <pre><code class="language-java">new ScheduledThreadPoolExecutor(3)</code></pre> <p><strong>好了，今天就到这儿吧，我是冰河，我们下期见~~</strong></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-22894.htm">Spring Security实现基于RBAC的权限表达式动态访问控制</a></p>
                                        <p>下一个：<a href="/news/article-23344.htm">C++入门   面向对象的基础</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-35163.htm" title="动物打疫苗要多少钱 动物打疫苗要多少钱一针">动物打疫苗要多少钱 动物打疫苗要多少钱一针</a></li>
                        <li class="py-2"><a href="/news/article-38510.htm" title="关于VUE中组件之间传值以及调用方法汇总">关于VUE中组件之间传值以及调用方法汇总</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-13-clash-v2ray-ss-ssr.htm" title="12月13日→21.6M/S|2024年最新免费节点Free V2ray订阅链接地址">12月13日→21.6M/S|2024年最新免费节点Free V2ray订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-24746.htm" title="动物疫苗冷藏温度是多少（动物疫苗的储存温度）">动物疫苗冷藏温度是多少（动物疫苗的储存温度）</a></li>
                        <li class="py-2"><a href="/news/article-30839.htm" title="宠物粮食品牌上市公司排名前十 宠物粮食品牌上市公司排名前十名">宠物粮食品牌上市公司排名前十 宠物粮食品牌上市公司排名前十名</a></li>
                        <li class="py-2"><a href="/news/article-26155.htm" title="猫抓了出血了可以不打疫苗吗猫（猫抓了一下出了点血不打疫苗可以吗）">猫抓了出血了可以不打疫苗吗猫（猫抓了一下出了点血不打疫苗可以吗）</a></li>
                        <li class="py-2"><a href="/news/article-30838.htm" title="Python生成迷宫">Python生成迷宫</a></li>
                        <li class="py-2"><a href="/news/article-40981.htm" title="青岛动物医院 南京路 青岛动物医院 南京路分院电话">青岛动物医院 南京路 青岛动物医院 南京路分院电话</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-16-free-node-subscribe.htm" title="12月16日→21.9M/S|2024年最新免费节点Free V2ray订阅链接地址">12月16日→21.9M/S|2024年最新免费节点Free V2ray订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-31234.htm" title="编译python(cpython)的源码及其用途">编译python(cpython)的源码及其用途</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- //progress section -->
    <!--//testimonials-->
        <!-- footer -->
    <footer class="w3l-footer-16 py-5">
        <div class="container">
            <div class="below-section text-center">
                <p class="copy-text">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <a href="/">Free V2ray免费梯子节点分享官网</a> 版权所有 Powered by WordPress
                </p>
            </div>
        </div>
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fas fa-level-up-alt" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/website/js/frontend/free_v2ray/jquery-3.5.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- counter for stats -->
    <script src="/assets/website/js/frontend/free_v2ray/counter.js"></script>
    <!-- //counter for stats -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/free_v2ray/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the
        // class of outer div
        // The second paramter is the speed between each letter is typed.
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/website/js/frontend/free_v2ray/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
    <!-- //Js scripts -->
</body>

</html>